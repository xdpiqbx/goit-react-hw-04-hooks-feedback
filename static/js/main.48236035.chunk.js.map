{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.module.css","components/StatisticsItem/StatisticsItem.module.css","components/Section/Section.module.css","App.module.css","components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Feedback/Feedback.js","components/StatisticsItem/StatisticsItem.js","components/Notification/Notification.js","components/Statistics/Statistics.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Section","props","title","children","className","s","container","FeedbackOptions","options","onLeaveFeedback","listButtons","map","option","listItem","button","onClick","toUpperCase","slice","uuidv4","Feedback","StatisticsItem","name","value","isPercent","itemTitle","itemValue","defaultProps","Notification","message","Statistics","good","neutral","bad","total","percent","App","useState","setGood","setNeutral","setBad","countTotalFeedback","type","prevGood","prevNeutral","prevBad","Math","floor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48236035.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"listButtons\":\"FeedbackOptions_listButtons__H0SpB\",\"listItem\":\"FeedbackOptions_listItem__1o0EJ\",\"button\":\"FeedbackOptions_button__3xGGP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"StatisticsItem_listItem__1X6CS\",\"itemTitle\":\"StatisticsItem_itemTitle__2Dc8y\",\"itemValue\":\"StatisticsItem_itemValue__3BOCM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Section_container__3oeSn\",\"title\":\"Section_title__w_ocS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__29KVX\"};","import PropTypes from 'prop-types';\r\n\r\nimport s from './Section.module.css';\r\n\r\nconst Section = props => {\r\n  const { title, children } = props;\r\n  return (\r\n    <div className={s.container}>\r\n      <span className={s.title}>{title}</span>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.element,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport s from './FeedbackOptions.module.css';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <ul className={s.listButtons}>\r\n      {options.map(option => {\r\n        return (\r\n          <li className={s.listItem} key={uuidv4()}>\r\n            <button\r\n              className={s.button}\r\n              onClick={() => onLeaveFeedback(option)}\r\n            >\r\n              {option[0].toUpperCase() + option.slice(1)}\r\n            </button>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default FeedbackOptions;\r\n\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func,\r\n  options: PropTypes.arrayOf(PropTypes.string),\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nimport Section from '../Section';\r\nimport FeedbackOptions from '../FeedbackOptions';\r\n\r\nconst Feedback = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <Section title=\"Feedback\">\r\n      <FeedbackOptions options={options} onLeaveFeedback={onLeaveFeedback} />\r\n    </Section>\r\n  );\r\n};\r\n\r\nexport default Feedback;\r\n\r\nFeedback.propTypes = {\r\n  onLeaveFeedback: PropTypes.func,\r\n  options: PropTypes.array,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport s from './StatisticsItem.module.css';\r\n\r\nconst StatisticsItem = props => {\r\n  const { name, value, isPercent } = props;\r\n  return (\r\n    <li className={s.listItem}>\r\n      <span className={s.itemTitle}>{name}:</span>\r\n      <span className={s.itemValue}>\r\n        {value} {isPercent ? '%' : null}\r\n      </span>\r\n    </li>\r\n  );\r\n};\r\n\r\nStatisticsItem.defaultProps = {\r\n  value: 0,\r\n  isPercent: false,\r\n};\r\n\r\nexport default StatisticsItem;\r\n\r\nStatisticsItem.propTypes = {\r\n  name: PropTypes.string,\r\n  value: PropTypes.number,\r\n  isPercent: PropTypes.bool,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => {\r\n  return <h2>{message}</h2>;\r\n};\r\n\r\nexport default Notification;\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nimport Section from '../Section';\r\nimport StatisticsItem from '../StatisticsItem';\r\nimport Notification from '../Notification';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, percent }) => {\r\n  return (\r\n    <Section title=\"Statistics\">\r\n      {total ? (\r\n        <ul>\r\n          <StatisticsItem name=\"Good\" value={good} />\r\n          <StatisticsItem name=\"Neutral\" value={neutral} />\r\n          <StatisticsItem name=\"Bad\" value={bad} />\r\n          <StatisticsItem name=\"Total\" value={total} />\r\n          <StatisticsItem\r\n            name=\"Positive feedback\"\r\n            value={percent}\r\n            isPercent={true}\r\n          />\r\n        </ul>\r\n      ) : (\r\n        <Notification message=\"No feedback given\" />\r\n      )}\r\n    </Section>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  total: PropTypes.number,\r\n  percent: PropTypes.number,\r\n};\r\n","import { useState } from 'react';\r\n\r\nimport Feedback from './components/Feedback';\r\nimport Statistics from './components/Statistics';\r\n\r\nimport s from './App.module.css';\r\n\r\nfunction App () {\r\n  const [good, setGood] = useState(0)\r\n  const [neutral, setNeutral] = useState(0)\r\n  const [bad, setBad] = useState(0)\r\n\r\n  function increment(type){\r\n    switch(type){\r\n      case \"good\":\r\n        setGood(prevGood => prevGood + 1)\r\n        return\r\n      case \"neutral\":\r\n        setNeutral(prevNeutral => prevNeutral + 1)\r\n        return\r\n      case \"bad\":\r\n        setBad(prevBad => prevBad + 1)\r\n        return\r\n      default:\r\n        return\r\n    }\r\n  }\r\n\r\n  function countTotalFeedback() {\r\n    return good + neutral + bad;\r\n  }\r\n\r\n  function countPositiveFeedbackPercentage() {\r\n    return Math.floor((good * 100) / countTotalFeedback());\r\n  }\r\n\r\n  return (\r\n    <div className={s.App}>\r\n      <Feedback\r\n        options={['good', 'neutral', 'bad']}\r\n        onLeaveFeedback={increment}\r\n      />\r\n      <Statistics\r\n        good={good}\r\n        neutral={neutral}\r\n        bad={bad}\r\n        total={countTotalFeedback()}\r\n        percent={countPositiveFeedbackPercentage()}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}